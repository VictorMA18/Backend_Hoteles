import stripe
import json
from django.conf import settings
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from .models import Booking

stripe.api_key = settings.STRIPE_SECRET_KEY

@csrf_exempt
def create_payment_intent(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            booking_id = data['booking_id']
            
            booking = Booking.objects.get(id=booking_id)
            
            # Crear PaymentIntent
            intent = stripe.PaymentIntent.create(
                amount=int(booking.total_price * 100),
                currency='usd',
                automatic_payment_methods={'enabled': True},
                metadata={
                    'booking_id': booking.id,
                    'user_id': request.user.id
                }
            )
            
            booking.payment_intent_id = intent.id
            booking.save()
            
            return JsonResponse({
                'clientSecret': intent.client_secret
            })
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)

@csrf_exempt
def stripe_webhook(request):
    payload = request.body
    sig_header = request.META.get('HTTP_STRIPE_SIGNATURE', '')
    
    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET
        )
    except ValueError:
        return HttpResponse(status=400)
    except stripe.error.SignatureVerificationError:
        return HttpResponse(status=400)

    # Manejar eventos
    if event['type'] == 'payment_intent.succeeded':
        payment_intent = event['data']['object']
        handle_payment_succeeded(payment_intent)
    elif event['type'] == 'payment_intent.payment_failed':
        payment_intent = event['data']['object']
        handle_payment_failed(payment_intent)
    
    return HttpResponse(status=200)

def handle_payment_succeeded(payment_intent):
    booking_id = payment_intent.metadata['booking_id']
    try:
        booking = Booking.objects.get(id=booking_id)
        booking.payment_status = 'succeeded'
        booking.save()
        # Enviar email de confirmación aquí
    except Booking.DoesNotExist:
        pass

def handle_payment_failed(payment_intent):
    booking_id = payment_intent.metadata['booking_id']
    try:
        booking = Booking.objects.get(id=booking_id)
        booking.payment_status = 'failed'
        booking.save()
        # Notificar al usuario
    except Booking.DoesNotExist:
        pass
